{
  // Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "foldable-code-region": {
    "prefix": "region",
    "body": [
      "#region ${1:Description of region}",
      "",
      "\t${0:# Your code goes here...}",
      "",
      "#endregion $1"
    ],
    "description": "Foldable code region with description on both ends"
  },
  "function-advanced": {
    "prefix": "function-advanced",
    "body": [
      "function ${1:Verb-Noun} {",
      "\t[CmdletBinding()]",
      "\tparam (",
      "\t\t${0}",
      "\t)",
      "\tWrite-Verbose -Message 'Start: function $1'",
      "",
      "} # function $1"
    ],
    "description": "Advanced function with default 'Write-Verbose' statement"
  },
  "do-until-loop": {
    "prefix": "do-until",
    "body": [
      "do { # until ($1)",
      "\t${0:# loop body}",
      "} until (${1:condition})"
    ],
    "description": "Do-Until loop"
  },
  "do-while-loop": {
    "prefix": "do-while",
    "body": [
      "do { # while ($1)",
      "\t${0:# loop body}",
      "} while (${1:condition})"
    ],
    "description": "Do-While loop"
  },
  "while-loop": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t${0:# loop body}",
      "} # while ($1)"
    ],
    "description": "While loop"
  },
  "foreach-loop": {
    "prefix": "foreach",
    "body": [
      "foreach ($${1:item} in $${2:collection}) {",
      "\t${0:# loop body}",
      "} # foreach ($$1 in $$2)"
    ],
    "description": "ForEach loop"
  },
  "pester-describe": {
    "prefix": "Describe-Pester",
    "body": [
      "Describe \"${1:describe name}\"${2: -Tag \"${3:tagName}\"} {",
      "\t${0:# Your code goes here...}",
      "} # Describe \"$1\"$2"
    ],
    "description": "Pester Describe"
  },
  "pester-context": {
    "prefix": "Context-Pester",
    "body": [
      "Context \"${1:context name}\" {",
        "\t${0:# Your code goes here...}",
        "} # Context \"$1\""
    ],
    "description": "Pester Context"
  },
  "pester-it": {
    "prefix": "It-Pester",
    "body": [
      "It \"${1:it name}\" {",
        "\t${0:# Your code goes here...}",
        "} # It \"$1\""
    ],
    "description": "Pester It"
  },
  "pester-inModuleScope": {
    "prefix": "InModuleScope-Pester",
    "body": [
      "InModuleScope \"${1:Module Name}\" {",
        "\t${0:# Your code goes here...}",
        "} # InModuleScope \"$1\""
    ],
    "description": "Pester InModuleScope"
  },
  "pester-mock": {
    "prefix": "Mock-Pester",
    "body": [
      "Mock -CommandName \"${1:Command-Name}\"${2: -ModuleName \"${3:Module-Name}\"} {",
      "\t${0:# Your code goes here...}",
      "} # Mock \"$1\"$2"
    ],
    "description": "Pester Mock"
  },
  "for-loop": {
    "prefix": "for",
    "body": [
      "for ($${1:i} = 0; $${1:i} -lt $${2:array}.Count; $${1:i}++) {",
      "\t${0:# loop body}",
      "} # for ($$1 = 0; $$1 -lt $$2.Count; $1++)"
    ],
    "description": "For loop"
  }
}
